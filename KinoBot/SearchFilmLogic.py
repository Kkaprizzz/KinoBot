from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import database, subCheck_logic

router = Router()

class SearchStates(StatesGroup):
    Searching = State()
    NotSearching = State()

async def clear_state(state: FSMContext):
    await state.set_state(SearchStates.NotSearching)

@router.callback_query(F.data == "check_subscription")
async def check_subscription_callback(callback: CallbackQuery, state: FSMContext):
    user_id = callback.from_user.id

    if await subCheck_logic.check_all_subscriptions(user_id):
        await callback.message.delete()
        await state.set_state(SearchStates.Searching)
        await callback.message.answer("‚úÖ <b>–û—Ç–ª–∏—á–Ω–æ!</b>\n–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏ –∫–æ–¥ —Ñ–∏–ª—å–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (1234) –Ω–∏–∂–µ ‚¨áÔ∏è", parse_mode="HTML")

    else:
        await callback.answer("‚ùå –í—ã –µ—â—ë –Ω–µ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã!", show_alert=True)

@router.message(F.text.contains("üîé –ü–æ–∏—Å–∫ –ø–æ –∫–æ–¥—É"))
async def searchFilmHandler(message: Message, state: FSMContext):
    userId = message.from_user.id
    chatId = message.chat.id

    sponsors = await database.get_sponsors()
    print(sponsors)
    if sponsors:
        if not await subCheck_logic.check_all_subscriptions(userId):
            keyboard = InlineKeyboardMarkup(inline_keyboard=[ 
                [InlineKeyboardButton(text=f"–ö–∞–Ω–∞–ª {name}", url=url)]
                for id, name, url, url_private in sponsors
            ] + [[InlineKeyboardButton(text="‚úÖ –Ø –ø–æ–¥–ø–∏—Å–∞–ª—Å—è –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã", callback_data='check_subscription')]]
            )

            await message.reply_photo(
                photo="https://ibb.co/BVZVtP91", 
                caption=(
                    "üìå –ü–µ—Ä–µ–¥ –Ω–∞—á–∞–ª–æ–º —Ä–∞–±–æ—Ç—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –≤—Å–µ –∫–∞–Ω–∞–ª—ã-–ø–∞—Ä—Ç–Ω—ë—Ä—ã.\n\n"
                    "‚úÖ –ü–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –±–æ—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è.\n"
                    "üëá –ü—Ä–æ–≤–µ—Ä—å –ø–æ–¥–ø–∏—Å–∫—É –∏ –∑–∞–ø—É—Å–∫–∞–π –±–æ—Ç–∞."
                ),
                reply_markup=keyboard
            )
        else:

            await message.answer("–ù–∞–ø–∏—à–∏ –∫–æ–¥ –Ω–∏–∂–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ (–•–•–•–•)‚¨áÔ∏è")
            await state.set_state(SearchStates.Searching)

@router.message(SearchStates.Searching)
async def searchHandler(message: Message, state: FSMContext):
    code = message.text.strip()
    user_id = message.from_user.id
    chat_id = message.chat.id

    if not code.isdigit():
        await message.answer("–ö–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä! üî¢")
        return
    
    result = await database.show_movie(int(code))

    if result:
        try:

            title, description, image_url = result
            button = []
            isLiked = await database.get_liked_movies(user_id)
            if int(code) not in isLiked:
                button.append(InlineKeyboardButton(text="‚ù§Ô∏è", callback_data=f"like_{code}"))
            else:
                button.append(InlineKeyboardButton(text="üíî", callback_data=f"dislike_{code}"))
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[button])

            await message.reply_photo(
                image_url,
                caption=f"–ù–∞–∑–≤–∞–Ω–∏–µ: <b>{title}</b>\n\n<b>{description}</b>",
                parse_mode="HTML",
                reply_markup=keyboard
            )
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            return
    else:
        await message.answer("‚ùåüé¨ <b>–§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω.</b>\n–ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∫–æ–¥! üòä", parse_mode="HTML")

@router.callback_query(F.data.startswith('like_'))
async def like_movie(callback: CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–¥ —Ñ–∏–ª—å–º–∞ –∏–∑ callback_data
    code = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    await database.add_liked_movie(user_id, code)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="üíî", callback_data=f"dislike_{code}")]])
    try:
        await callback.message.edit_reply_markup(reply_markup=kb)
    except Exception as e:
        print(e)
    await callback.answer("–§–∏–ª—å–º –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è!", show_alert=False)

@router.callback_query(F.data.startswith('dislike_'))
async def dislike_movie(callback: CallbackQuery):
    code = int(callback.data.split('_')[1])
    user_id = callback.from_user.id
    await database.remove_liked_movie(user_id, code)
    kb = InlineKeyboardMarkup(inline_keyboard=[[InlineKeyboardButton(text="‚ù§Ô∏è", callback_data=f"dislike_{code}")]])
    try:
        await callback.message.edit_reply_markup(reply_markup=kb)
    except Exception as e:
        print(e)
    await callback.answer("–§–∏–ª—å–º —É–±—Ä–∞–Ω –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–Ω—Ä–∞–≤–∏–≤—à–∏—Ö—Å—è!", show_alert=False)